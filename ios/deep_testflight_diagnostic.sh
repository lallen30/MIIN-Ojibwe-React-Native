#!/bin/bash

# Deep TestFlight Upload Diagnostic Script
# Identifies why builds aren't appearing in TestFlight

set -e

echo "üîç Deep TestFlight Upload Diagnostic"
echo "===================================="

PROJECT_ROOT="/Users/lallen30/Documents/bluestoneapps/clients/MIIN-Ojibwe/MIIN-Ojibwe-react-app"
cd "$PROJECT_ROOT/ios"

# 1. Check if bundle ID exists in App Store Connect
echo "üìã Bundle Identifier Analysis:"
BUNDLE_ID=$(grep 'PRODUCT_BUNDLE_IDENTIFIER' MIIN-Ojibwe.xcodeproj/project.pbxproj | head -1 | sed 's/.*= //g' | sed 's/;//g' | tr -d '"' | xargs)
echo "  Bundle ID: $BUNDLE_ID"

# 2. Check Xcode Organizer archives
echo ""
echo "üì¶ Recent Archives Check:"
ARCHIVES_PATH="$HOME/Library/Developer/Xcode/Archives"
if [ -d "$ARCHIVES_PATH" ]; then
    echo "  Recent MIIN-Ojibwe archives:"
    find "$ARCHIVES_PATH" -name "*MIIN-Ojibwe*" -type d -exec ls -la {} \; 2>/dev/null | head -5 || echo "  No MIIN-Ojibwe archives found"
    
    echo "  Recent archives (any):"
    find "$ARCHIVES_PATH" -name "*.xcarchive" -type d -exec ls -lt {} \; 2>/dev/null | head -3 || echo "  No recent archives found"
fi

# 3. Check for upload logs
echo ""
echo "üì§ Upload Status Check:"
UPLOAD_LOGS="$HOME/Library/Developer/Shared/Documentation/DocC/Build/symbol-graphs"
if [ -d "$UPLOAD_LOGS" ]; then
    echo "  Upload logs directory exists"
else
    echo "  No upload logs found"
fi

# 4. Check code signing
echo ""
echo "üîê Code Signing Verification:"
TEAM_ID=$(grep 'DEVELOPMENT_TEAM' MIIN-Ojibwe.xcodeproj/project.pbxproj | head -1 | sed 's/.*= //g' | sed 's/;//g' | tr -d '"' | xargs)
echo "  Development Team: $TEAM_ID"

CODE_SIGN_IDENTITY=$(grep 'CODE_SIGN_IDENTITY' MIIN-Ojibwe.xcodeproj/project.pbxproj | head -1 | sed 's/.*= //g' | sed 's/;//g' | tr -d '"' | xargs)
echo "  Code Sign Identity: $CODE_SIGN_IDENTITY"

# 5. Check for required app icons
echo ""
echo "üñºÔ∏è  App Icons Check:"
ICONS_PATH="MIIN-Ojibwe/Images.xcassets/AppIcon.appiconset"
if [ -d "$ICONS_PATH" ]; then
    echo "  App icons directory exists"
    ICON_COUNT=$(find "$ICONS_PATH" -name "*.png" | wc -l)
    echo "  Number of icon files: $ICON_COUNT"
    if [ $ICON_COUNT -lt 3 ]; then
        echo "  ‚ö†Ô∏è  Warning: Very few app icons found"
    fi
else
    echo "  ‚ùå App icons directory not found"
fi

# 6. Check for build errors in system logs
echo ""
echo "üö® System Build Errors:"
echo "  Checking recent Xcode errors..."
log show --predicate 'process == "Xcode"' --last 1h --style compact 2>/dev/null | grep -i error | tail -3 || echo "  No recent Xcode errors found"

# 7. Check App Store Connect API status
echo ""
echo "üåê App Store Connect Status:"
curl -s -I https://appstoreconnect.apple.com > /dev/null
if [ $? -eq 0 ]; then
    echo "  ‚úÖ App Store Connect is accessible"
else
    echo "  ‚ö†Ô∏è  App Store Connect may be experiencing issues"
fi

echo ""
echo "üîç COMMON REASONS BUILDS DON'T APPEAR:"
echo "====================================="
echo "1. ‚ùå Bundle ID doesn't match App Store Connect app"
echo "2. ‚ùå Invalid provisioning profile"
echo "3. ‚ùå Missing or invalid app icons"
echo "4. ‚ùå Binary validation failures"
echo "5. ‚ùå Export compliance issues"
echo "6. ‚ùå Code signing certificate problems"
echo "7. ‚ùå Upload interrupted or failed silently"
echo "8. ‚ùå App Store Connect processing delays"

echo ""
echo "üõ†Ô∏è  IMMEDIATE TROUBLESHOOTING STEPS:"
echo "=================================="
echo "1. üìß Check email for rejection notifications"
echo "2. üîç Open Xcode > Window > Organizer > Archives"
echo "3. üì§ Check if upload shows 'Uploaded' status"
echo "4. üåê Log into App Store Connect manually:"
echo "   https://appstoreconnect.apple.com"
echo "5. üì± Check TestFlight section specifically"
echo "6. üîÑ Try uploading again with verbose logging"

echo ""
echo "üîß ALTERNATIVE UPLOAD METHOD:"
echo "============================"
echo "Try using Application Loader or altool:"
echo "  1. Archive the app"
echo "  2. Export as 'App Store Connect'"
echo "  3. Use altool command line:"
echo "     xcrun altool --upload-app --type ios --file YourApp.ipa \\"
echo "       --username your@email.com --password app-specific-password"

echo ""
echo "üìã VERIFICATION CHECKLIST:"
echo "========================="
echo "‚ñ° Bundle ID matches App Store Connect"
echo "‚ñ° Valid distribution certificate"
echo "‚ñ° Valid provisioning profile"
echo "‚ñ° All required app icons present"
echo "‚ñ° Export compliance setting correct"
echo "‚ñ° No build errors in archive"
echo "‚ñ° Upload completed successfully"
echo "‚ñ° Waited at least 30 minutes"

echo ""
echo "‚ú® Diagnostic complete!"
