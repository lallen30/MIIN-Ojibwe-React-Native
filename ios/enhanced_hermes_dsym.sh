#!/bin/bash

set -e

echo "üöÄ Enhanced Hermes dSYM Generation for TestFlight"
echo "======================================================="

# Configuration
CONFIGURATION=${CONFIGURATION:-Release}
BUILT_PRODUCTS_DIR=${BUILT_PRODUCTS_DIR:-"./build/Release-iphoneos"}
DWARF_DSYM_FOLDER_PATH=${DWARF_DSYM_FOLDER_PATH:-"$BUILT_PRODUCTS_DIR"}

echo "üìã Configuration: $CONFIGURATION"
echo "üìÅ Built Products Dir: $BUILT_PRODUCTS_DIR"
echo "üìÅ dSYM Folder Path: $DWARF_DSYM_FOLDER_PATH"

# Find all Hermes frameworks in the build directory
echo "üîç Searching for Hermes frameworks..."
HERMES_FRAMEWORKS=$(find "$BUILT_PRODUCTS_DIR" -name "hermes.framework" -type d 2>/dev/null || true)

if [ -z "$HERMES_FRAMEWORKS" ]; then
    echo "‚ö†Ô∏è  No Hermes frameworks found in $BUILT_PRODUCTS_DIR"
    echo "üîç Searching in alternative locations..."
    
    # Alternative search paths
    ALT_PATHS=(
        "./ios/build"
        "./build"
        "~/Library/Developer/Xcode/DerivedData"
    )
    
    for alt_path in "${ALT_PATHS[@]}"; do
        if [ -d "$alt_path" ]; then
            echo "üîç Searching in $alt_path..."
            HERMES_FRAMEWORKS=$(find "$alt_path" -name "hermes.framework" -type d 2>/dev/null || true)
            if [ -n "$HERMES_FRAMEWORKS" ]; then
                echo "‚úÖ Found Hermes frameworks in $alt_path"
                break
            fi
        fi
    done
fi

if [ -z "$HERMES_FRAMEWORKS" ]; then
    echo "‚ùå No Hermes frameworks found in any location"
    exit 0
fi

# Process each Hermes framework found
echo "$HERMES_FRAMEWORKS" | while read -r HERMES_FRAMEWORK; do
    if [ -z "$HERMES_FRAMEWORK" ]; then
        continue
    fi
    
    echo "üì¶ Processing Hermes framework: $HERMES_FRAMEWORK"
    
    HERMES_BINARY="$HERMES_FRAMEWORK/hermes"
    HERMES_DSYM="$HERMES_FRAMEWORK.dSYM"
    
    # Check if the Hermes binary exists
    if [ ! -f "$HERMES_BINARY" ]; then
        echo "‚ùå Hermes binary not found at $HERMES_BINARY"
        continue
    fi
    
    echo "üî® Generating dSYM for Hermes binary: $HERMES_BINARY"
    
    # Remove existing dSYM
    if [ -d "$HERMES_DSYM" ]; then
        echo "üóëÔ∏è  Removing existing dSYM: $HERMES_DSYM"
        rm -rf "$HERMES_DSYM"
    fi
    
    # Generate dSYM using dsymutil
    if dsymutil "$HERMES_BINARY" -o "$HERMES_DSYM"; then
        echo "‚úÖ Successfully generated dSYM: $HERMES_DSYM"
        
        # Verify the dSYM structure
        if [ -d "$HERMES_DSYM" ]; then
            echo "üîç Verifying dSYM structure..."
            ls -la "$HERMES_DSYM"
            
            # Check for DWARF data
            DWARF_FILES=$(find "$HERMES_DSYM" -name "*" -type f 2>/dev/null || true)
            if [ -n "$DWARF_FILES" ]; then
                echo "‚úÖ dSYM contains DWARF data"
                
                # Verify UUIDs match
                if command -v dwarfdump >/dev/null 2>&1; then
                    echo "üîç Checking UUIDs..."
                    BINARY_UUID=$(dwarfdump --uuid "$HERMES_BINARY" 2>/dev/null | head -1 | awk '{print $2}' || echo "unknown")
                    DSYM_UUID=$(dwarfdump --uuid "$HERMES_DSYM" 2>/dev/null | head -1 | awk '{print $2}' || echo "unknown")
                    
                    echo "üì± Binary UUID: $BINARY_UUID"
                    echo "üìÑ dSYM UUID:   $DSYM_UUID"
                    
                    if [ "$BINARY_UUID" = "$DSYM_UUID" ] && [ "$BINARY_UUID" != "unknown" ]; then
                        echo "‚úÖ UUIDs match - dSYM is valid"
                    else
                        echo "‚ö†Ô∏è  UUIDs don't match or couldn't be determined"
                    fi
                fi
                
                # Copy to the expected dSYM folder if different
                if [ "$DWARF_DSYM_FOLDER_PATH" != "$(dirname "$HERMES_DSYM")" ]; then
                    DSYM_DEST="$DWARF_DSYM_FOLDER_PATH/hermes.framework.dSYM"
                    echo "üìã Copying dSYM to: $DSYM_DEST"
                    
                    mkdir -p "$DWARF_DSYM_FOLDER_PATH"
                    cp -R "$HERMES_DSYM" "$DSYM_DEST"
                    
                    if [ -d "$DSYM_DEST" ]; then
                        echo "‚úÖ dSYM copied successfully"
                    else
                        echo "‚ùå Failed to copy dSYM"
                    fi
                fi
                
            else
                echo "‚ùå dSYM appears to be empty or invalid"
            fi
        else
            echo "‚ùå dSYM directory was not created"
        fi
    else
        echo "‚ùå Failed to generate dSYM with dsymutil"
        
        # Try alternative approach with llvm-dsymutil if available
        if command -v llvm-dsymutil >/dev/null 2>&1; then
            echo "üîÑ Trying with llvm-dsymutil..."
            if llvm-dsymutil "$HERMES_BINARY" -o "$HERMES_DSYM"; then
                echo "‚úÖ Successfully generated dSYM with llvm-dsymutil"
            else
                echo "‚ùå llvm-dsymutil also failed"
            fi
        fi
    fi
done

echo "üèÅ Hermes dSYM generation complete"

# List all dSYM files in the build directory for verification
echo "üìã All dSYM files in build directory:"
find "$BUILT_PRODUCTS_DIR" -name "*.dSYM" -type d 2>/dev/null | while read -r dsym; do
    echo "  üìÑ $dsym"
    if [ -d "$dsym/Contents/Resources/DWARF" ]; then
        DWARF_FILES=$(ls "$dsym/Contents/Resources/DWARF" 2>/dev/null || true)
        if [ -n "$DWARF_FILES" ]; then
            echo "    ‚úÖ Contains DWARF data: $DWARF_FILES"
        else
            echo "    ‚ùå No DWARF data found"
        fi
    fi
done
