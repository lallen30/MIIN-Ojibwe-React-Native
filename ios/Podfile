# Resolve react_native_pods.rb with node to allow for hoisting
require Pod::Executable.execute_command('node', ['-p',
  'require.resolve(
    "react-native/scripts/react_native_pods.rb",
    {paths: [process.argv[1]]},
  )', __dir__]).strip

platform :ios, min_ios_version_supported
prepare_react_native_project!

# Don't enable modular headers globally - causes build issues
# use_modular_headers!

# linkage = ENV['USE_FRAMEWORKS']
# if linkage != nil
#   Pod::UI.puts "Configuring Pod with #{linkage}ally linked Frameworks".green
#   use_frameworks! :linkage => linkage.to_sym
# end

# Ensure module maps are generated for GoogleUtilities (required by FirebaseCoreInternal when
# integrating as static libraries). Do NOT add FirebaseCoreInternal explicitly; it is a transitive
# dependency pulled by RNFBApp.
pod 'GoogleUtilities', :modular_headers => true

target 'MIIN-Ojibwe' do
  config = use_native_modules!

  use_react_native!(
    :path => config[:reactNativePath],
    # An absolute path to your application root.
    :app_path => "#{Pod::Config.instance.installation_root}/..",
    # Explicitly enable Hermes for proper dSYM generation
    :hermes_enabled => true
  )

  pod 'RNVectorIcons', :path => '../node_modules/react-native-vector-icons'
  pod 'RNFBApp', :path => '../node_modules/@react-native-firebase/app'

  target 'MIIN-OjibweTests' do
    inherit! :complete
    # Pods for testing
  end

  post_install do |installer|
    # https://github.com/facebook/react-native/blob/main/packages/react-native/scripts/react_native_pods.rb#L197-L202
    react_native_post_install(
      installer,
      config[:reactNativePath],
      :mac_catalyst_enabled => false
    )
    
    installer.pods_project.targets.each do |target|
      target.build_configurations.each do |config|
        config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '13.4'
        config.build_settings['ENABLE_BITCODE'] = 'NO'
        
        # Fix for non-modular-include-in-framework-module errors
        if target.name == 'glog' || target.name == 'fmt' || target.name == 'Yoga'
          config.build_settings['CLANG_ALLOW_NON_MODULAR_INCLUDES_IN_FRAMEWORK_MODULES'] = 'YES'
        end
        
        # Only apply dSYM settings for Release configuration
        if config.name == 'Release'
          config.build_settings['DEBUG_INFORMATION_FORMAT'] = 'dwarf-with-dsym'
          config.build_settings['COPY_PHASE_STRIP'] = 'NO'
          config.build_settings['STRIP_INSTALLED_PRODUCT'] = 'NO'
          
          # Hermes-specific settings for Release only
          if target.name == 'hermes-engine'
            config.build_settings['STRIP_STYLE'] = 'debugging'
            config.build_settings['STRIP_SWIFT_SYMBOLS'] = 'NO'
            config.build_settings['GCC_GENERATE_DEBUGGING_SYMBOLS'] = 'YES'
            config.build_settings['DEPLOYMENT_POSTPROCESSING'] = 'YES'
            config.build_settings['SEPARATE_STRIP'] = 'YES'
          end
        end
      end
    end
    
    # Generate Hermes dSYM after pod install
    hermes_xcframework_path = "#{installer.sandbox.root}/hermes-engine/destroot/Library/Frameworks/universal/hermes.xcframework"
    hermes_ios_framework_path = "#{hermes_xcframework_path}/ios-arm64/hermes.framework"
    
    if File.directory?(hermes_ios_framework_path)
      hermes_binary = "#{hermes_ios_framework_path}/hermes"
      hermes_dsym = "#{hermes_ios_framework_path}.dSYM"
      
      if File.file?(hermes_binary) && !File.directory?(hermes_dsym)
        puts "üîß Generating Hermes dSYM for iOS arm64..."
        system("dsymutil '#{hermes_binary}' -o '#{hermes_dsym}'")
        
        if File.directory?(hermes_dsym)
          puts "‚úÖ Hermes dSYM generated successfully at #{hermes_dsym}"
        else
          puts "‚ö†Ô∏è  Failed to generate Hermes dSYM"
        end
      elsif File.directory?(hermes_dsym)
        puts "‚úÖ Hermes dSYM already exists"
      end
    else
      puts "‚ö†Ô∏è  Hermes iOS framework not found at: #{hermes_ios_framework_path}"
      
      # List available frameworks for debugging
      if File.directory?(hermes_xcframework_path)
        puts "üìç Available Hermes frameworks:"
        Dir.glob("#{hermes_xcframework_path}/*/*.framework").each do |framework|
          puts "  - #{framework}"
        end
      end
    end
  end
end

